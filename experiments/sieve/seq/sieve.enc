-----------------------------------------------------------------------------
-- Dummy class for embedding
-----------------------------------------------------------------------------
passive class Void

-----------------------------------------------------------------------------
-- PrimeArray
-----------------------------------------------------------------------------
passive class PrimeArray
  data : Void 
  def flag(index : int) : void
    let bs = this.data in 
      embed void
        //printf("\t\tFlagging ... %lld\n", #{index});
        set((bitset*) #{bs}, #{index});
      end
  def unflag(index : int) : void
    let bs = this.data in 
      embed void
        unset((bitset*) #{bs}, #{index});
      end
  def is_not_flagged(index : int) : bool 
    let bs = this.data in 
      embed bool
        //printf("\t\tChecking to see that %lld is not flagged ... %s\n", #{index}, isset((bitset*) #{bs}, #{index}) ? "it is" : "it isn't");
        !isset((bitset*) #{bs}, #{index});
      end
  def set_size(size : int) : void 
    this.data = embed Void
        (Void_data*) mkBitset(0);
    end
  def bit_index(a : int, b : int) : int 
    embed int
      (#{a} % #{b}) ? ((#{a}/#{b})+1) * #{b} - #{a} : 0;
    end
  def even(a : int) : bool
    embed bool
      #{a} % 2 == 0;
    end
  def mod(a : int, b : int) : int
    embed int
      #{a} % #{b};
    end
  def puts_debug(s : string, i : int) : void
    embed void
      fprintf(stderr, "%s: %lld\n", #{s}, #{i});
    end
  def puts_debug4(s1 : string, i1 : int, s2 : string, i2 : int) : void
    embed void
      fprintf(stderr, "%s: %lld %s: %lld\n", #{s1}, #{i1}, #{s2}, #{i2});
    end

-----------------------------------------------------------------------------
-- Main
-----------------------------------------------------------------------------
class Main
  start : int
  size : int
  prime_array : PrimeArray

  def main() : void 
    -- Requirement: vec_size * 4 > number_of_actors^2
    let vec_size = 12*16*1024*1024 in
      this.init(vec_size)

  def set_bound(start : int, size : int) : void {
      this.start = start;
      this.size = size;
      this.prime_array = new PrimeArray;
      this.prime_array.set_size(size);
    }

  def init(size : int) : void { 
      this.set_bound(3, size);
      this.filter();
      print 2;
      this.post_result(this.prime_array, this.start);
    }

  def filter() : void
    let value = this.start in
    let offset = 0 in 
      while offset < this.size
        {
          -- this.prime_array.puts_debug("filter1", offset);
          -- this.prime_array.puts_debug("filter2", value);
          if this.prime_array.is_not_flagged(offset) then {
            this.pass_on(value);
            this.remove_simple(offset, value);
          } else {
              ();
            -- this.prime_array.puts_debug("not a prime", value);
          }; 
          offset = offset + 1;
          value = value + 2;
        }

  def remove_simple(offset : int, value : int) : void {
    -- this.prime_array.puts_debug("remove_simple1", offset);
    -- this.prime_array.puts_debug("remove_simple2", value);
    let offset = offset + value in
      while offset < this.size
        {
          -- this.prime_array.puts_debug("flagging", offset);
          this.prime_array.flag(offset);
          offset = offset + value
        }
    }

  def pass_on(value : int) : void 
    ()

  def post_result(a : PrimeArray, start : int) : void 
    let value = start in
    let i = 0 in
      while i < this.size 
        {
          if a.is_not_flagged(i) then print value else ();
          i = i + 1;
          value = value + 2;
        }


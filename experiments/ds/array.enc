passive class Array_Data<t>
  v: t

  def init(v: t) : void
    this.v = v

passive class Array<t>
  slots: Array_Data<t>
  size: int

  def init(size:int) : void
    embed void
      this->slots = pony_alloc(size * sizeof(void *));
      this->size = size;
    end

  def write(i:int, v:Array_Data<t>) : void
    embed void
      ((void **)this->slots)[i] = (void *)v;
    end

  def read(i:int) : (Array_Data<t>)
    embed (Array_Data<t>)
      (0 <= i && i < this->size) ? ((void **)this->slots)[i] : NULL;
    end

class Main
 def main() : void 
   let a = new (Array<int>)(5)
       b = 0
       e = 5
   in {
       a.write(0, new (Array_Data<int>)(0));
       a.write(1, new (Array_Data<int>)(1));
       a.write(2, new (Array_Data<int>)(2));
       a.write(3, new (Array_Data<int>)(3));
       a.write(4, new (Array_Data<int>)(4));
       while b <= e {
           let d = a.read(b) in unless d == null then print d.v;
           b = b + 1;
        }
   }



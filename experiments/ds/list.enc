passive class Data
  elem: int

  def init(e: int): Data {
    this.elem = e;
    this;
  }

  def value() : int
    this.elem

passive class Node
  data: Data
  next: Node

  def init(x: int): void {
    this.data = null;
    this.next = null;
  }

passive class List
  head: Node

  def init(): void
    this.head = null

  def pop(): Data
    let n = this.head in {
	this.head = n.next;
        n.data;
    }

  def push(data: Data): List {
    let node = new Node in {
	node.next = this.head;
        node.data = data;
	this.head = node;
    };
    this;
  }

  def next(): Node
    this.head.next

  def index(i: int): Node
    let size = this.size()
        node = this.head in {
	if (i < 0) then {
          i = size + i;
        };
	while ((i > 0) and (node != null)){
          node = node.next;
	  i = i - 1;
        };
        node;
    }

  def find(data: Data): bool
    let iter = this.head 
        found = false in {
	while(iter != null){
          if (iter.data.elem != data.elem) then {
            iter = iter.next;
	  } else {
            iter = null;
            found = true;
          }
        };
	found;
    }

  def subset(l1: List): bool
    let is_subset = true 
        node = l1.head in {
      while(node != null){
        if(this.find(node.data)) then {
          node = node.next;
	  print "found";
        }else{
	  is_subset = false;
          -- there' no break right now
          node = null;
	  print "not found";
        };
      };
      is_subset;
    }
    

  def size(): int
    let count = 0
        node = this.head in {
	while(node !=null){
          count = count + 1;
	  node = node.next;
        };
        count;
    }

class Main
  def main(): void {
    let l = new List 
        l2 = new List in {
	l.push(new Data(7));        
        l.push(new Data(8));
        l.push(new Data(9));
        l.push(new Data(10));
	l2.push(new Data(7));
        let d = l.pop()  
	    dd = l.pop()
	    ddd = l.next()
	    index = l.index(0) in {
	    print d.elem;
            print dd.elem;
	    print ddd.data.elem;
            print index.data.elem;
	    print l.subset(l2);
	}

    }
  }

passive class Container<t> {
  elem :t

  def init(elem :t) :void
    this.elem = elem

  -- Defines an object pattern
  def This() :Maybe Container<t>
    Just this
    }
    
trait Letter
  require Letter() : Maybe String

passive class A : Letter {
  def init() :void
    ()
  
  def Letter() : Maybe String
    Just "A"
}
    
passive class B : Letter {
  def init() :void
    ()
    
  def Letter() : Maybe String
    Just "B"
}
    
class Main {
  def objectPatternTestWithFailingGuard() :void
    match new Container<String>("foobar") with
      _ when false => print "baaaad"
      This(This(This(This(c)))) => print c.elem

  def valueVariableTuplePatternsTestWithFailingGuard() :void
    match (1, 2, "123") with
      (a, b, "123") when a > b => print "nope"
      (1, b, "123") => print("{}{}123", 1, b)
      
  def evaluatesToTraitTest() :Letter{
    -- Just to test the typechecker
    match 1 with
      2 => new A() :Letter
      1 => new B()
  }
      
  def main() :void {
    this.objectPatternTestWithFailingGuard();
    this.valueVariableTuplePatternsTestWithFailingGuard();
    this.evaluatesToTraitTest();
  }
}

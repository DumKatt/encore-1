def show_string(x: String, const: String, type: String): void
  if x.equals(const) then
    print("{} {}: OK\n", x, type)
  else
    print("{} {}: ERROR\n", const, type)

def show_passive(x: PassiveTest, const: String, type: String): void
  if x.elem.equals(const) then
    print("{} {}: OK\n", x.elem, type)
  else
    print("{} {}: ERROR\n", x.elem, type)

def primitive_const(): String
  "Primitive Test"

def passive_const(): String
  "Passive Test"

passive class PassiveTest
  elem: String

  def init(s: String):void
    this.elem = s

class Test
  elem: String
  passiveTest: PassiveTest

  def init(s: String): void {
    this.elem = s;
    this.passiveTest = new PassiveTest(s);
  }

  def get_string(): String
    this.passiveTest.elem

  def get_pasive(): PassiveTest
    this.passiveTest

class Main

  def test_primitive_liftf(): void
    let testContentFuture = new Test("Liftf")
        primitive_par = liftf(testContentFuture.get_string())
    in
        extract(primitive_par >> \(x:String) -> show_string(x, "Liftf", primitive_const()))

  def test_passive_liftf(): void
    let test = new Test("Liftf")
        passive_par = liftf(test.get_pasive())
    in
        extract(passive_par >> \(x: PassiveTest) -> show_passive(x, "Liftf", passive_const()))

  def main(): void {
    this.test_primitive_liftf();
    this.test_passive_liftf();
  }
